# optional mesh_on_print_area
#[include macros/mesh_on_print_area.cfg]

# optional macro for tweaking velocity and acceleration
#[include macros/TEST_SPEED.cfg]

# Klipper standard macros

[pause_resume]

# Default macros

[gcode_macro START_PRINT]
description: Fancy print start code
gcode:
    {% set T_BED = params.T_BED|default(50)|float %}
    {% set T_EXTRUDER = params.T_EXTRUDER|default(200)|float %}
    {% set ACCELERATION = params.ACCEL|default(500)|float %}
    {% set VELOCITY = params.VELOCITY|default(180)|float %}

    # gently close on error?
    {% if T_BED < 0 or T_EXTRUDER < 0 or ACCELERATION <= 0 or VELOCITY <= 0 %}
    M117 Invalid arguments
    { action_raise_error("Invalid arguments") }
    {% endif %}

    { action_respond_info("START_PRINT summary") }
    { action_respond_info(" BED: %d *C" % T_BED) }
    { action_respond_info(" EXTRUDER: %d *C" % T_EXTRUDER) }
    { action_respond_info(" ACCEL: %d mm/s^2" % ACCELERATION) }
    { action_respond_info(" VELOCITY: %d mm/s" % VELOCITY) }

    CLEAR_PAUSE

    # store current extruder and coordinates settings
    SAVE_GCODE_STATE NAME=state_start_print

    # Reset heaters
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0 ; reset bed temperature
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 ; reset extruder temperature

    M117 Homing...
    G28

    # Use absolute coordinates but realative extrusions
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    G92 E0 ; reset extruder distance

    M117 Wait for bed temp
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={T_BED}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={T_BED}

    {% if T_BED > 60 %}
    # When using higher temperatore (PETG) wait until bed is evenly heated up
    # for 2 minutes
    M117 Dwell for 2 minutes to equalize bed temperature...
    G4 P120000
    {% endif %}

    {% if T_BED > 80 %}
    # When using even higher temperatore (eg for ASA/ABS) wait until bed is evenly heated up
    # for additional 8 minutes (total 10)
    M117 Dwell for 8 minutes to equalize bed temperature...
    G4 P480000
    {% endif %}

    BED_MESH_CLEAR
    # Adaptive mesh is still using count from config
    # eg. adapting 9x9 mesh to object area and giving out eg. 3x3 probes
    # this might not be sufficient/accurate enough
    # Sould it increase PROBE_COUNT to give it at least 5x5 points?
    # PROBE_COUNT=11,11
    M117 Adaptive mesh: start
    BED_MESH_CALIBRATE ADAPTIVE=1 PROFILE=adaptive
    M117 Adaptive mesh: done

    M117 Preheating nozzle...
    # set temporary nozzle temp to prevent oozing during homing and auto bed leveling
    # Bed 0.1 C/s
    # EX 1.7 ~ 2.0 C/s
    
    {% if T_EXTRUDER > 150 %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    {% endif %}

    M117 Homing Z ...
    G28 Z

    M117 Wait for extruder temp
    G0 Z50 ; Move nozzle up for better visual inspection
    
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={T_EXTRUDER}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={T_EXTRUDER}

    # Reset the G-Code Z offset (adjust Z offset if needed)
    # add sligt offset due to thermal expansion
    SET_GCODE_OFFSET Z=0.0 MOVE=1
  
    # Use the saved bed mesh
    #BED_MESH_PROFILE LOAD=default
    
    # Prime line
    PRIME_LINE
    M117 Printing...

    SET_VELOCITY_LIMIT VELOCITY={ VELOCITY } ACCEL={ ACCELERATION }

    RESTORE_GCODE_STATE NAME=state_start_print

[gcode_macro PRIME_LINE]
gcode:
    M117 Priming the nozzle
    {% set y_start = 20 + (range(0, 8) | random) * 0.64 %}
    {% set y_end = y_start + 80 %}
    G0 X0.1 Y{ y_start } Z0.3 F5000.0 ; Move to start position
    G1 X0.1 Y{ y_end } Z0.3 F1500.0 E7 ; Draw the first line
    G0 X0.4 Y{ y_end } Z0.3 F5000.0 ; Move to side a little
    G1 X0.4 Y{ y_start } Z0.3 F1500.0 E14 ; Draw the second line
    G0 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G0 X5 Y{ y_start} Z0.3 F5000.0 ; Move over to prevent blob squish
    G92 E0 ; Reset Extruder

[gcode_macro END_PRINT]
gcode:
    # Ensure toolhead is at least 80mm from bed for easy cleaning
    # or 10mm from finished print, but withing limits of maximum value
    {% set target_z = [[80, printer.toolhead.position.z + 10] | max, printer.toolhead.axis_maximum.z - 10] | min %}

    G91 ;Relative positioning
    M83 ;Relative extruder
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out


    M106 S0 ;Turn-off fan
    TURN_OFF_HEATERS ;Turn-off hotend and bed

    G90 ;Absolute positioning
    G1 X1 Y180 Z{ target_z } F5100 ;Present print

    M84 X Y E ;Disable all steppers but Z
    ; for now this will not work 4.2.2 has hardwired all
    ; steppers to single 'pin'
    # M84 ;Disable all steppers
    BED_MESH_CLEAR
    
    M117 Done


# ensure calling M25 will correctly pause printing
[gcode_macro M25]
rename_existing:  M25.0
gcode:
    PAUSE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # use printer.firmware_retraction.retract_length ?
    {% set X = params.X|default(5) %}
    {% set Y = params.Y|default(205) %}
    {% set Z = params.Z|default(10) %}
    {% set E = params.E|default(0.8) %}

    {action_call_remote_method("notify", name="matrix_notifier",
        message="Stop! It's PAUSE time!")}

    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F1900
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000
    # Beep 1s
    M300 P1000
    M117 Priner paused use RESUME to continue


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = params.E|default(1) %}

    G91
    G1 E{E} F1900
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    M117 Printing resumed

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    END_PRINT
    BASE_CANCEL_PRINT

#[gcode_macro MAINTENANCE]
#gcode:
#    SAVE_GCODE_STATE NAME=PAUSE_state
#    G1 X110 Y5 Z66.5 F600
#    M84

# Park toolhead
[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    M117 Parking toolhead
    G91
    G1 Z5 F600 # move up 5 mm
    G90
    # nozzle BEFORE and Y slightly before start to prevent hitting switch
    G1 X-2 Y2 F4000 # move to park position
    RESTORE_GCODE_STATE NAME=parking

# LOW_TEMP_CHECK checks if there is a setpoint for the extruder.
# - If this setpoint is reached, continue. 
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@215)
[gcode_macro LOW_TEMP_CHECK]
gcode: 
    {% set T = params.T|default(215)|float %}

    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M117 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
            M117 No setpoint, heating to {T}.
            M109 S{T}
        {% endif %}
    {% endif %}
    

# load filament alias
[gcode_macro M701]
gcode:
    LOAD_FILAMENT

# load filament
[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament - start
    {% set temp_before_heat = printer.extruder.target|float %}
    LOW_TEMP_CHECK { "T={}".format(params.T) if params.T}
    G91 # set relative
    G92 E0.0
    G1 E50 F150  # 100
    G1 E25 F120  # some extra to prime the nozzle --> slower 
    G92 E0.0
    # Restore original extruder temperature
    M109 S{ temp_before_heat }
    RESTORE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament - done


# unload filament alias
[gcode_macro M702]
gcode:
    UNLOAD_FILAMENT

# unload filament
[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M117 Unloading Filament - start
    {% set temp_before_heat = printer.extruder.target|float %}
    LOW_TEMP_CHECK { "T={}".format(params.T) if params.T}
    G91 # set relative
    G92 E0.0
    G1 E8 F100
    G1 E2 F300
    G1 E-20 F2000
    G1 E-30 F1500 # 100
    G92 E0.0
    # Restore original extruder temperature
    M109 S{ temp_before_heat }
    RESTORE_GCODE_STATE NAME=unloading_filament
    M117 Unloading Filament - done

# filament change 
[gcode_macro M600]
gcode:
    M117 Filament Change

    {action_call_remote_method("notify", name="matrix_notifier",
        message="Wake up Samurai! We have filament to change!")}

    SAVE_GCODE_STATE NAME=filament_change
    PAUSE
    LOW_TEMP_CHECK
    G91 # relative
    G1 E-1 F300 # retract 1
    M125 # park
    UNLOAD_FILAMENT # unload

    M117 New filament
    COUNTDOWN TIME=25 MSG="Switch"
    LOAD_FILAMENT
    COUNTDOWN TIME=10 MSG="Clean"
    RESTORE_GCODE_STATE NAME=filament_change
    M117 Call RESUME to continue printing

[gcode_macro COUNTDOWN]
gcode: 
    {% set MSG = params.MSG|default(Time)|string %}
    {% set TIME = params.TIME|default(10) %}

    # countdown 
    {% for s in range(TIME|int, 0, -1) %}
        # dwell 1 second
        G4 P1000
        # echo
        M117 {params.MSG} {s}sec
    {% endfor %}

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro M204]
rename_existing: M204.0
gcode:
  # PrusaSlicer (and family) will happily emit M204 Pxxx
  # Klipper want M204 Pxxx Txxx OR M204 Sxxx
  {% if 'S' in params %}
      M204.0 S{params.S}
  {% elif 'P' in params and 'T' in params %}
      M204.0 P{params.P} T{params.T}
  {% else %}
  {% set PT = params.P or params.T %}
      M204.0 P{PT} T{PT}
  {% endif %}

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    {action_call_remote_method("notify",
                               name="matrix_notifier",
                               message=escaped_msg)}
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
